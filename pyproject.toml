[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "heartbeat"
packages = [ { include = "api", from = "src" } ]
version = "0.3.0"
description = "A heart failure detection system"
readme = "README.md"
authors = [ "Vassilis Sioros <billsioros97@gmail.com>" ]
license = "MIT"
homepage = "https://billsioros.github.io/heartbeat"
repository = "https://github.com/billsioros/heartbeat"
keywords = [  ]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/billsioros/heartbeat/issues"
"Changelog" = "https://github.com/billsioros/heartbeat/releases"

[tool.poetry.scripts]
manage = "api.cli.manage:cli"

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.8.2"
pydantic-settings = "^2.3.4"
fastapi = "^0.111.1"
uvicorn = "^0.30.3"
gunicorn = "^22.0.0"
sqlalchemy = "^2.0.31"
psycopg2-binary = "^2.9.9"
typer = "^0.12.3"
rich = "^13.7.1"

[tool.poetry.group.dev.dependencies]
python-semantic-release = "7.34.6"
mypy = "*"
pre-commit = "*"
poethepoet = "*"
ruff = "*"

[tool.ruff]
target-version = "py310"

line-length = 99

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]
select = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
ignore = [  ]

fixable = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
unfixable = [  ]

per-file-ignores = {}

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

flake8-quotes.docstring-quotes = "double"
mccabe.max-complexity = 10
pydocstyle.convention = "google"

[tool.docformatter]
black = true
non-strict = true
non-cap = [ "heartbeat" ]
recursive = true
in-place = true

[tool.mypy]
files = [ "src/api" ]
warn_unused_configs = true
warn_return_any = true
ignore_missing_imports = true
pretty = true
color_output = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
changelog_components = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"
build_command = "python -m pip install poetry && poetry build"
upload_to_pypi = false

[tool.vulture]
min_confidence = 95
paths = [ "src/api" ]

[tool.poe.tasks]

[tool.poe.tasks.clean]
help = "Clean up any auxiliary files"
cmd = "rm -rf ./**/__pycache__ logs dist site .pytest_cache .mypy_cache .ruff_cache .coverage"

[tool.poe.tasks.format]
help = "Format your codebase"
shell = "ruff check --select I --fix .; ruff format ."

[tool.poe.tasks.hooks]
help = "Run all pre-commit hooks"
cmd = "poetry run pre-commit run --all-files --color always"

[tool.poe.tasks.type]
help = "Run static type checking on your codebase"
cmd = "poetry run mypy"

[tool.poe.tasks.lint]
help = "Lint your code for errors"
cmd = "poetry run ruff ."

[tool.poe.tasks.manage]
help = "Manage the application"
cmd = "poetry run manage"

[tool.bandit]
recursive = true
exclude_dirs = [ "tests" ]
