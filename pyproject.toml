[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "heartbeat"
packages = [ { include = "api", from = "src" } ]
version = "0.4.0"
description = "A heart failure detection system"
readme = "README.md"
authors = [ "Vassilis Sioros <billsioros97@gmail.com>" ]
license = "MIT"
homepage = "https://billsioros.github.io/heartbeat"
repository = "https://github.com/billsioros/heartbeat"
keywords = [  ]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/billsioros/heartbeat/issues"
"Changelog" = "https://github.com/billsioros/heartbeat/releases"

[tool.poetry.scripts]
manage = "api.cli.manage:cli"

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.8.2"
pydantic-settings = "^2.3.4"
fastapi = "^0.111.1"
uvicorn = "^0.30.3"
gunicorn = "^22.0.0"
sqlalchemy = "^2.0.31"
psycopg2-binary = "^2.9.9"
typer = "^0.12.3"
rich = "^13.7.1"
ipykernel = "^6.29.5"
pandas = "^2.2.2"
seaborn = "^0.13.2"
matplotlib = "^3.9.1"
scikit-learn = "^1.5.1"
xgboost = "^2.1.0"
tqdm = "^4.66.4"
jupyter = "^1.0.0"
ipywidgets = "^8.1.3"
joblib = "^1.4.2"

[tool.poetry.group.dev.dependencies]
mypy = "*"
pre-commit = "*"
poethepoet = "*"
ruff = "*"

[tool.ruff]
# Assume Python 3.8
target-version = "py38"

# Same as Black.
line-length = 88
indent-width = 4

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Like Black, indent with spaces, rather than tabs.
format.indent-style = "space"
# Like Black, use double quotes for strings.
format.quote-style = "double"
# Like Black, automatically detect the appropriate line ending.
format.line-ending = "auto"
# Like Black, respect magic trailing commas.
format.skip-magic-trailing-comma = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
format.docstring-code-line-length = "dynamic"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
format.docstring-code-format = false
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
lint.select = [
  "E4",
  "E7",
  "E9",
  "F",
]
lint.ignore = [
]
# Allow fix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
  "ALL",
]
lint.unfixable = [
]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.docformatter]
black = true
non-strict = true
non-cap = [ "heartbeat" ]
recursive = true
in-place = true

[tool.mypy]
files = [ "src/api" ]
warn_unused_configs = true
warn_return_any = true
ignore_missing_imports = true
pretty = true
color_output = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
changelog_components = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"
build_command = "python -m pip install poetry && poetry build"
upload_to_pypi = false

[tool.vulture]
min_confidence = 95
paths = [ "src/api" ]

[tool.poe.tasks]

[tool.poe.tasks.clean]
help = "Clean up any auxiliary files"
cmd = "rm -rf ./**/__pycache__ logs dist site .pytest_cache .mypy_cache .ruff_cache .coverage"

[tool.poe.tasks.format]
help = "Format your codebase"
shell = "ruff check --select I --fix .; ruff format ."

[tool.poe.tasks.hooks]
help = "Run all pre-commit hooks"
cmd = "poetry run pre-commit run --all-files --color always"

[tool.poe.tasks.type]
help = "Run static type checking on your codebase"
cmd = "poetry run mypy"

[tool.poe.tasks.lint]
help = "Lint your code for errors"
cmd = "poetry run ruff ."

[tool.poe.tasks.manage]
help = "Manage the application"
cmd = "poetry run manage"

[tool.bandit]
recursive = true
exclude_dirs = [ "tests" ]
