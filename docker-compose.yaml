version: "3.8"
services:
  frontend:
    env_file: .env
    build:
      context: ./src/web
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: frontend
    ports:
      - 80:80
    networks:
      - network
    depends_on:
      backend:
        condition: service_healthy
  backend:
    env_file: .env
    build:
      context: .
      dockerfile: ./src/api/Dockerfile
    restart: unless-stopped
    container_name: backend
    ports:
      - 8000:8000
    networks:
      - network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8000/api/monitor || exit 1
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - ${PWD}/model.joblib:/home/app/app/model.joblib
  database:
    env_file: .env
    container_name: database
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - network
    restart: on-failure
    healthcheck:
      test: pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}
      interval: 5s
      timeout: 10s
      retries: 10
volumes:
  pgdata:
networks:
  network:
    driver: bridge
